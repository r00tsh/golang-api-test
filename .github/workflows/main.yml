name: CI/CD for branch main
on:
  push:
    branches:
      - main
jobs:
  # release:
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Bump version and push tag
  #       id: tag_version
  #       uses: mathieudutour/github-tag-action@v6.2
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Create a GitHub release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         tag: ${{ steps.tag_version.outputs.new_tag }}
  #         name: Release ${{ steps.tag_version.outputs.new_tag }}
  #         body: ${{ steps.tag_version.outputs.changelog }}
  # build_push:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write
  #   needs: release
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Install Task
  #       uses: arduino/setup-task@v2
  #       with:
  #         version: 3.x
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Install jq
  #       uses: sergeysova/jq-action@v2
  #     - name: Clone taskfiles repository
  #       uses: actions/checkout@v4
  #       with:
  #         repository: rootsh/taskfiles
  #         path: taskfiles
  #         ref: v0.0.22
  #         ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and Push Container Image
  #       run: |
  #         task build:buildx
  #     - name: Install Trivy vulnerability scanner
  #       run: |
  #         curl -L $TRIVY_DEB_URL --output /tmp/trivy.deb && sudo dpkg --install /tmp/trivy.deb && rm -f /tmp/trivy.deb
  #       env:
  #         TRIVY_DEB_URL: https://github.com/aquasecurity/trivy/releases/download/v0.50.0/trivy_0.50.0_Linux-64bit.deb
  #     - name: Scan vulnerability for container image
  #       run: |
  #         task trivy:image
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #     - name: Upload Artifact for version
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: version
  #         path: version.txt
  #         retention-days: 90
  # deploy:
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   needs: build_push
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Install Task
  #       uses: arduino/setup-task@v2
  #       with:
  #         version: 3.x
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Install yq
  #       uses: mikefarah/yq@master
  #     - name: Clone taskfiles repository
  #       uses: actions/checkout@v4
  #       with:
  #         repository: rootsh/taskfiles
  #         path: taskfiles
  #         ref: v0.0.22
  #         ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
  #     - name: Clone gitops repository
  #       uses: actions/checkout@v4
  #       with:
  #         repository: rootsh/gitops
  #         path: gitops
  #         fetch-depth: 0
  #         ssh-key: ${{ secrets.PRIVATE_KEY_GITOPS_DEPLOY }}
  #     - name: Download version.txt
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: version
  #     - name: Set TAG of version.txt
  #       run: |
  #           echo "TAG=$(cat version.txt)" >> $GITHUB_ENV
  #     - name: Set env REPO_NAME to repository name
  #       run: |
  #         echo "GIT_REPO_NAME=$(basename $(git remote get-url origin) | cut -f1 -d'.')" >> $GITHUB_ENV
  #     - name: Pull request for GitOps
  #       env:
  #         PIPELINE_ID: ${{ github.run_number }}
  #         DIRECTORY_APPS: gitops/k8s/main/applications
  #         GH_TOKEN: ${{ secrets.GITOPS_PAT_TOKEN }}
  #       run: |
  #         task deploy:pr
  # argocd_sync:
  #   runs-on: self-hosted
  #   needs: deploy
  #   environment: 'prd'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Install Task
  #       uses: arduino/setup-task@v2
  #       with:
  #         version: 3.x
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Install ArgoCD CLI
  #       uses: imajeetyadav/argocd-cli@v1
  #     - name: Clone taskfiles repository
  #       uses: actions/checkout@v4
  #       with:
  #         repository: rootsh/taskfiles
  #         path: taskfiles
  #         ref: v0.0.22
  #         ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
  #     - name: Deploy PRD
  #       env:
  #         ARGOCD_CONFIG_NAME: ${{ secrets.ARGOCD_CONFIG_MAIN }}
  #       run: |
  #         task argocd:config
  #         task argocd:deploy
  qa:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG_MAIN }}
      - name: Kubectl port-forward for application
        run: |
         kubectl port-forward svc/golang-api-test 8080:8080 -n golang-api-test &
      - name: Install k6
        run: |
          curl $K6_PACKAGE -L | tar xvz --strip-components 1
        env: 
          K6_PACKAGE: https://github.com/grafana/k6/releases/download/v0.50.0/k6-v0.50.0-linux-arm64.tar.gz
      - name: Run tests
        run: |
          ./k6 run --out json=k6_results.json qa/k6/run.js
      - name: Upload Artifact for version
        uses: actions/upload-artifact@v4
        with:
          name: k6
          path: k6_results.json
          retention-days: 90

      
          

