name: CI/CD for branch main
on:
  push:
    branches:
      - main
jobs:
  release:
    runs-on: ubuntu-latest
    name: Release version
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
  build_push:
    runs-on: ubuntu-latest
    name: Build containter and push image
    permissions:
      security-events: write
    needs: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
      - name: Install jq
        uses: sergeysova/jq-action@v2
      - name: Clone taskfiles repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/taskfiles
          path: taskfiles
          ref: chore/scan-issue
          ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push container 
        run: |
          task build:buildx
      - name: Install Trivy vulnerability scanner
        run: |
          curl -L $TRIVY_DEB_URL --output /tmp/trivy.deb && sudo dpkg --install /tmp/trivy.deb && rm -f /tmp/trivy.deb
        env:
          TRIVY_DEB_URL: https://github.com/aquasecurity/trivy/releases/download/v0.50.0/trivy_0.50.0_Linux-64bit.deb
      - name: Scan vulnerability for container image
        run: |
          task trivy:image
          task trivy:issue
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Upload Artifact for version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
          retention-days: 90
  gitops:
    runs-on: ubuntu-latest
    name: Update version in GitOps
    permissions: write-all
    needs: build_push
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
      - name: Install yq
        uses: mikefarah/yq@master
      - name: Clone taskfiles repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/taskfiles
          path: taskfiles
          ref: v0.0.24
          ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
      - name: Clone gitops repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/gitops
          path: gitops
          fetch-depth: 0
          ssh-key: ${{ secrets.PRIVATE_KEY_GITOPS_DEPLOY }}
      - name: Download version.txt
        uses: actions/download-artifact@v4
        with:
          name: version
      - name: Set TAG of version.txt
        run: |
            echo "TAG=$(cat version.txt)" >> $GITHUB_ENV
      - name: Set env REPO_NAME to repository name
        run: |
          echo "GIT_REPO_NAME=$(basename $(git remote get-url origin) | cut -f1 -d'.')" >> $GITHUB_ENV
      - name: Pull request for GitOps
        env:
          PIPELINE_ID: ${{ github.run_number }}
          DIRECTORY_APPS: gitops/k8s/main/applications
          GH_TOKEN: ${{ secrets.GITOPS_PAT_TOKEN }}
        run: |
          task deploy:pr
  argocd_sync:
    runs-on: self-hosted
    name: Deploy using ArgoCD
    needs: gitops
    environment: 'prd'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
      - name: Install ArgoCD CLI
        uses: imajeetyadav/argocd-cli@v1
      - name: Clone taskfiles repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/taskfiles
          path: taskfiles
          ref: v0.0.24
          ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
      - name: Deploy PRD
        env:
          ARGOCD_CONFIG_NAME: ${{ secrets.ARGOCD_CONFIG_MAIN }}
        run: |
          task argocd:config
          task argocd:deploy
  qa:
    runs-on: self-hosted
    name: QA using K6
    needs: argocd_sync
    steps:
      - uses: actions/checkout@v4
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
      - name: Clone taskfiles repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/taskfiles
          path: taskfiles
          ref: v0.0.24
          ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG_MAIN }}
      - name: Install k6
        run: |
          curl $K6_PACKAGE -L | tar xvz --strip-components 1
        env: 
          K6_PACKAGE: https://github.com/grafana/k6/releases/download/v0.50.0/k6-v0.50.0-linux-arm64.tar.gz
      - name: Run K6 load test
        run: |
          task k6:k6_k8s_service
      - name: Upload Artifact for version
        uses: actions/upload-artifact@v4
        with:
          name: k6
          path: k6_results.json
          retention-days: 90
  owasp_zap:
    runs-on: self-hosted
    name: Scan API
    needs: argocd_sync
    container:
      image: ghcr.io/zaproxy/zaproxy:stable
    steps:
      - uses: actions/checkout@v4
      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
      - name: Clone taskfiles repository
        uses: actions/checkout@v4
        with:
          repository: rootsh/taskfiles
          path: taskfiles
          ref: v0.0.24
          ssh-key: ${{ secrets.PRIVATE_KEY_TASKFILES_DEPLOY }}          
      - name: Run Scan
        continue-on-error: true
        run: |
          ~/.local/bin/task owasp-zap:kubectl_install
          ~/.local/bin/task owasp-zap:run_zap_scan_api
        env:
          KUBECONFIG_B64: ${{ secrets.KUBE_CONFIG_MAIN }}
          TARGET: http://localhost:8080/swagger/doc.json
          ZAP_CONFIG: -z "-config globalexcludeurl.url_list.url.regex='^http:\/\/localhost:8080\/swagger.*$'"
      - name: Upload Artifact scan
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap_scan
          path: /zap/wrk/zap-scan-result.html
          retention-days: 90